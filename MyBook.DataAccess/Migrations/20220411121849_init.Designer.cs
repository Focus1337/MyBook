// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBook.DataAccess;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyBook.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220411121849_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookUser", b =>
                {
                    b.Property<Guid>("FavoriteBooksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("FavoriteBooksId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("BookUser");

                    b.HasData(
                        new
                        {
                            FavoriteBooksId = new Guid("3cb92c37-ec67-4720-af23-d7f4d4096109"),
                            UsersId = new Guid("4bee3a36-db98-4071-ad61-a61db810decb")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyBook.Entity.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("320852a1-b75b-4b89-b286-873c80d11727"),
                            Description = " английская писательница. Автор более двух десятков книг, носитель множества почётных учёных степеней различных университетов и лауреат многочисленных литературных наград и премий.",
                            FullName = "Антония Сьюзен Байетт",
                            Image = "https://i2.mybook.io/c/288x336/author_photos/67/6f/676f2223-7bad-4900-8098-f06d98ec61ad.jpg"
                        },
                        new
                        {
                            Id = new Guid("51e7d2f1-d989-4e59-86c8-278123f564ea"),
                            Description = "Американская писательница, оратор и тренер по успеху.",
                            FullName = "Джен Синсеро",
                            Image = "https://i3.mybook.io/c/288x336/author_photos/e0/7e/e07e6648-5bbc-4110-9e22-2e3dfd40c110.jpe"
                        },
                        new
                        {
                            Id = new Guid("2ee0cdd2-a3d6-414f-9038-874b12916a86"),
                            Description = "Джордж Оруэлл (George Orwell) – творческий псевдоним английского писателя и публициста. Настоящее имя – Эрик Артур Блэр (Eric Arthur Blair). Родился 25 июня 1903 года в Индии в семье британского торгового агента. Оруэлл учился в школе св. Киприана. В 1917 году получил именную стипендию и до 1921 года посещал Итонский Колледж. Жил в Великобритании и других странах Европы, где перебивался случайными заработками и начал писать. Пять лет служил в колониальной полиции в Бирме, про что в 1934 году рассказал в повести «Дни в Бирме».",
                            FullName = "Джордж Оруэлл",
                            Image = "https://i1.mybook.io/c/288x336/author_photos/0f/be/0fbe593e-84d2-4d9c-9b8d-a746363a8661.jpg"
                        },
                        new
                        {
                            Id = new Guid("02788b50-5eae-42ce-a375-c0416840d687"),
                            Description = "Американский автор и консультант по личному развитию, предприниматель и блогер. Ведет блог под своим именем на одноименном сайте. По состоянию на 2019 год написал три книги. Книга «Тонкое искусство пофигизма» заняла шестое место в списке бестселлеров The New York Times.",
                            FullName = "Марк Мэнсон",
                            Image = "https://i1.mybook.io/c/288x336/author_photos/b8/0a/b80ac274-40fe-4525-9f0f-59a2fa5159c7.jpg"
                        },
                        new
                        {
                            Id = new Guid("93348ec2-1d0b-4aff-a83e-aebe01a891d6"),
                            Description = "Федор Достоевский родился в 1821 году в Москве. Отец Достоевского не считал, что писательство — серьезное занятие для молодого человека, а потому отправил его и брата Михаила изучать инженерное дело, что невероятно тяготило молодые умы. Достоевский все свое время уделял самообразованию и был одним из умнейших людей своего века. Первый литературный опыт, еще в студенчестве, оказался успешным, и шаг за шагом Достоевский вошел в круг влиятельных авторов и публицистов. Раннюю славу Достоевскому принес его первый роман «Бедные люди».",
                            FullName = "Федор Достоевский",
                            Image = "https://i2.mybook.io/c/288x336/author_photos/f1/9a/f19a27f4-c7d5-4945-b478-07ef957b9b24.jpg"
                        });
                });

            modelBuilder.Entity("MyBook.Entity.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("SubType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3cb92c37-ec67-4720-af23-d7f4d4096109"),
                            AddedDate = new DateTime(2022, 2, 23, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            AuthorId = new Guid("320852a1-b75b-4b89-b286-873c80d11727"),
                            Description = "«Рагнарёк» – книга из серии древних мифов, переосмысленных современными писателями из разных стран",
                            Genre = "Мифы",
                            Image = "https://i3.mybook.io/p/x378/book_covers/30/00/300043ba-0dc7-4a59-b7e1-f1e2ae00a2a7.jpg",
                            Rating = 3.6400000000000001,
                            SubType = 1,
                            Title = "Рагнарёк",
                            Year = 2022
                        },
                        new
                        {
                            Id = new Guid("16d8568d-ec3f-4ee4-9823-514d2c4daf17"),
                            AddedDate = new DateTime(2022, 3, 11, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            AuthorId = new Guid("320852a1-b75b-4b89-b286-873c80d11727"),
                            Description = "«Обладать» – один из лучших английских романов конца XX века и, несомненно, лучшее произведение Антонии Байетт. Впрочем, слово «роман» можно применить к этой удивительной прозе весьма условно. Что же такое перед нами? Детективный роман идей? Женский готический роман в современном исполнении? Рыцарский роман на новый лад? Все вместе – и нечто большее, глубоко современная вещь, вобравшая многие традиции и одновременно отмеченная печатью подлинного вдохновения и новаторства. В ней разными гранями переливается тайна английского духа и английского величия.",
                            Genre = "Современная зарубежная литература",
                            Image = "https://i2.mybook.io/p/x378/book_covers/97/d3/97d3522b-2d15-47e4-a5cd-2aad363dbee1.jpg",
                            Rating = 4.3799999999999999,
                            SubType = 1,
                            Title = "Обладать",
                            Year = 2016
                        },
                        new
                        {
                            Id = new Guid("fa8bbaf0-a3f9-4378-84bf-dccc9ecc2155"),
                            AddedDate = new DateTime(2022, 4, 4, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            AuthorId = new Guid("51e7d2f1-d989-4e59-86c8-278123f564ea"),
                            Description = "Мышление формирует реальность вокруг нас. Даже в глубоком кризисе можно увидеть новые возможности. Меняйте мышление с помощью «НИ СЫ» и двигайтесь к новым целям.",
                            Genre = "Саморазвитие",
                            Image = "https://i1.mybook.io/p/x378/book_covers/fa/96/fa96a442-3911-43a3-9dfc-af45f882cf84.jpg",
                            Rating = 4.4800000000000004,
                            SubType = 1,
                            Title = "НИ СЫ. Будь уверен в своих силах и не позволяй сомнениям мешать тебе двигаться вперед...",
                            Year = 2018
                        },
                        new
                        {
                            Id = new Guid("cca20620-56c4-40d3-bfc3-7d88bff9ea1f"),
                            AddedDate = new DateTime(2022, 3, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            AuthorId = new Guid("2ee0cdd2-a3d6-414f-9038-874b12916a86"),
                            Description = "Фантастическая антиутопия Оруэлла – это мир тотального контроля и страха, где люди живут ради войны, ради того, чтобы скрыть правду и воспитать настоящих патриотов. В жестоком тоталитарном государстве люди лишены гражданских прав и собственного мнения. Культ Большого Брата подразумевает жесткую социальную иерархию, где даже проявление любви считается мыслепреступлением. Уинстон Смит понимает, что он пешка в этой истории, и тем не менее пытается что-то изменить. «1984» – это аллюзия на страны, в которых господствовал тоталитаризм. В ХХ веке книга была запрещена в социалистических государствах и вызвала волну возмущения по всему миру. Сейчас же «1984» считается ключевым произведением в жанре антиутопии.",
                            Genre = "Историческая фантастика",
                            Image = "https://i2.mybook.io/p/x378/book_covers/e0/43/e043bd65-99fb-4234-bbcd-1ec8ee02855f.jpg",
                            Rating = 4.5599999999999996,
                            SubType = 1,
                            Title = "1984",
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("8faa5631-6f76-437a-a924-1c5ad5806a5e"),
                            AddedDate = new DateTime(2022, 2, 2, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            AuthorId = new Guid("02788b50-5eae-42ce-a375-c0416840d687"),
                            Description = "Современное общество пропагандирует культ успеха: будь умнее, богаче, продуктивнее – будь лучше всех. Соцсети изобилуют историями на тему, как какой-то малец придумал приложение и заработал кучу денег, статьями в духе «Тысяча и один способ быть счастливым», а фото во френдленте создают впечатление, что окружающие живут лучше и интереснее, чем мы. Однако наша зацикленность на позитиве и успехе лишь напоминает о том, чего мы не достигли, о мечтах, которые не сбылись. Как же стать по-настоящему счастливым? Популярный блогер Марк Мэнсон в книге «Тонкое искусство пофигизма» предлагает свой, оригинальный подход к этому вопросу. Его жизненная философия проста – необходимо научиться искусству пофигизма. Определив то, до чего вам действительно есть дело, нужно уметь наплевать на все второстепенное, забить на трудности, послать к черту чужое мнение и быть готовым взглянуть в лицо неудачам и показать им средний палец.",
                            Genre = "Саморазвитие",
                            Image = "https://i2.mybook.io/p/x378/book_covers/b1/7c/b17c3a67-7a18-45fb-895a-4e628d6b874b.jpg",
                            Rating = 4.3700000000000001,
                            SubType = 1,
                            Title = "Тонкое искусство пофигизма",
                            Year = 2017
                        },
                        new
                        {
                            Id = new Guid("2a4751dc-1779-4bd4-a876-dbafa232e5cf"),
                            AddedDate = new DateTime(2022, 3, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            AuthorId = new Guid("93348ec2-1d0b-4aff-a83e-aebe01a891d6"),
                            Description = "«Преступление и наказание» — классический психологический роман, написанный Достоевским с характерным для автора глубоким философским подтекстом. Книга входит в школьную программу по литературе — однако понять произведение во всем его величии, будучи школьником, очень сложно. Именно поэтому стоит вернуться к книге еще раз, перечитать эту историю и понять, что же толкнуло студента на совершение убийства, какую моральную ответственность он взял на себя. Это не просто история об одном убийстве, это срез общества, история о социуме, о государственном и общественном строе, о борьбе добра и зла, о свободе и необходимости. В основу сюжета легла реальная история о французском интеллектуале-убийце, который заявлял, что не он один, а все общество несет ответственность за его деяния.",
                            Genre = "Русская классика",
                            Image = "https://i1.mybook.io/p/x378/book_covers/25/c9/25c9ed85-4e1e-40cd-88aa-791dd985bde8.jpg",
                            Rating = 4.5,
                            SubType = 0,
                            Title = "Преступление и наказание",
                            Year = 2008
                        });
                });

            modelBuilder.Entity("MyBook.Entity.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f17d951-3ad5-49f9-b333-2a37e367333d"),
                            ConcurrencyStamp = "84b61a95-7ac7-4252-bad2-27d2a58af2dc",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("12d534a7-4535-4819-8704-bcfd7553ab46"),
                            ConcurrencyStamp = "e3e85581-5819-4d56-824e-edb81d0127a3",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("6dc02633-d464-4f86-8575-4cb190d670a6"),
                            ConcurrencyStamp = "172a75bc-8b12-49a5-b9a1-821464472636",
                            Name = "UserSub",
                            NormalizedName = "USERSUB"
                        });
                });

            modelBuilder.Entity("MyBook.Entity.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("4bee3a36-db98-4071-ad61-a61db810decb"),
                            RoleId = new Guid("6f17d951-3ad5-49f9-b333-2a37e367333d")
                        });
                });

            modelBuilder.Entity("MyBook.Entity.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Subs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "📚  Все книги\n🎙️ Все аудиокниги и подкасты\n💌  Персональные рекомендации\n👌  Первоклассная поддержка",
                            Duration = 43200,
                            Name = "Месяц",
                            Price = 349m
                        },
                        new
                        {
                            Id = 2,
                            Description = "📚  Все книги\n🎙️ Все аудиокниги и подкасты\n💌  Персональные рекомендации\n👌  Первоклассная поддержка",
                            Duration = 259200,
                            Name = "Полгода",
                            Price = 1794m
                        },
                        new
                        {
                            Id = 3,
                            Description = "📚  Все книги\n🎙️ Все аудиокниги и подкасты\n💌  Персональные рекомендации\n👌  Первоклассная поддержка",
                            Duration = 525600,
                            Name = "Год",
                            Price = 2988m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Нихуя нет у тебя браток",
                            Duration = 0,
                            Name = "Нет",
                            Price = 0m
                        });
                });

            modelBuilder.Entity("MyBook.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("SubDateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SubId")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SubId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4bee3a36-db98-4071-ad61-a61db810decb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "784e7067-3603-4e5e-97ce-b70957a864ae",
                            Email = "1@mail.ru",
                            EmailConfirmed = false,
                            Image = new byte[0],
                            LastName = "LastName",
                            LockoutEnabled = true,
                            Name = "Name",
                            PasswordHash = "AQAAAAEAACcQAAAAEBYiodokZsZRb23HmsOebO9xUQixijVwVPzaOSiF9yKPiVUTUBkr6WkcMsCaN9qsvQ",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6XN27C5W5ARJZESDVSRBUS4NMCN5XCPR",
                            SubDateStart = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubId = 1,
                            TwoFactorEnabled = false,
                            UserName = "S1mple"
                        });
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.HasOne("MyBook.Entity.Book", null)
                        .WithMany()
                        .HasForeignKey("FavoriteBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBook.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MyBook.Entity.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MyBook.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MyBook.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MyBook.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBook.Entity.Book", b =>
                {
                    b.HasOne("MyBook.Entity.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("MyBook.Entity.Identity.UserRole", b =>
                {
                    b.HasOne("MyBook.Entity.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBook.Entity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBook.Entity.User", b =>
                {
                    b.HasOne("MyBook.Entity.Subscription", "Sub")
                        .WithMany()
                        .HasForeignKey("SubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sub");
                });

            modelBuilder.Entity("MyBook.Entity.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("MyBook.Entity.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MyBook.Entity.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
